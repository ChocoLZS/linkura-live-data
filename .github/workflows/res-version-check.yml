name: Resource Version Check

permissions:
  contents: write

on:
  workflow_dispatch:  # 允许手动触发

jobs:
  check-res-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version-check.outputs.new_version }}
      update_type: ${{ steps.version-check.outputs.update_type }}
      client_version: ${{ steps.version-check.outputs.client_version }}
      res_version: ${{ steps.version-check.outputs.res_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
    
    - name: Run resource version check
      id: version-check
      run: |
        cd scripts
        chmod +x handle_res_version.sh
        
        # 获取更新前的状态
        OLD_RES_VERSION=""
        OLD_CLIENT_VERSION=""
        if [ -f "../data/res_version.txt" ]; then
          OLD_RES_VERSION=$(head -n 1 ../data/res_version.txt | cut -d'@' -f1)
        fi
        if [ -f "../others/linkura-googleplay-apk.csv" ]; then
          OLD_CLIENT_VERSION=$(head -2 ../others/linkura-googleplay-apk.csv | tail -1 | cut -d',' -f2)
        fi
        
        # 运行版本检查脚本
        if ./handle_res_version.sh; then
          echo "new_version=true" >> $GITHUB_OUTPUT
          
          # 获取更新后的版本信息
          NEW_RES_VERSION=$(head -n 1 ../data/res_version.txt | cut -d'@' -f1)
          NEW_CLIENT_VERSION=$(head -2 ../others/linkura-googleplay-apk.csv | tail -1 | cut -d',' -f2)
          
          # 确定更新类型
          UPDATE_TYPE=""
          if [ "$OLD_CLIENT_VERSION" != "$NEW_CLIENT_VERSION" ] && [ "$OLD_RES_VERSION" != "$NEW_RES_VERSION" ]; then
            UPDATE_TYPE="client+res"
            echo "检测到客户端版本更新: $OLD_CLIENT_VERSION -> $NEW_CLIENT_VERSION"
            echo "检测到资源版本更新: $OLD_RES_VERSION -> $NEW_RES_VERSION"
          elif [ "$OLD_CLIENT_VERSION" != "$NEW_CLIENT_VERSION" ]; then
            UPDATE_TYPE="client"
            echo "检测到客户端版本更新: $OLD_CLIENT_VERSION -> $NEW_CLIENT_VERSION"
          elif [ "$OLD_RES_VERSION" != "$NEW_RES_VERSION" ]; then
            UPDATE_TYPE="res"
            echo "检测到资源版本更新: $OLD_RES_VERSION -> $NEW_RES_VERSION"
          else
            UPDATE_TYPE="unknown"
          fi
          
          # 输出变量
          echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
          echo "client_version=$NEW_CLIENT_VERSION" >> $GITHUB_OUTPUT
          echo "res_version=$NEW_RES_VERSION" >> $GITHUB_OUTPUT
          echo "old_client_version=$OLD_CLIENT_VERSION" >> $GITHUB_OUTPUT
          echo "old_res_version=$OLD_RES_VERSION" >> $GITHUB_OUTPUT
          
        else
          echo "new_version=false" >> $GITHUB_OUTPUT
          echo "没有检测到版本更新"
        fi
    
    - name: Configure Git
      if: steps.version-check.outputs.new_version == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get the current date time
      id: datetime
      if: steps.version-check.outputs.new_version == 'true'
      run: echo "time_now=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
    - name: Generate commit message
      if: steps.version-check.outputs.new_version == 'true'
      id: commit-msg
      run: |
        UPDATE_TYPE="${{ steps.version-check.outputs.update_type }}"
        CLIENT_VER="${{ steps.version-check.outputs.client_version }}"
        RES_VER="${{ steps.version-check.outputs.res_version }}"
        OLD_CLIENT_VER="${{ steps.version-check.outputs.old_client_version }}"
        OLD_RES_VER="${{ steps.version-check.outputs.old_res_version }}"
        DATETIME="${{ steps.datetime.outputs.time_now }}"
        
        case "$UPDATE_TYPE" in
          "client+res")
            MSG="feat: update client v${CLIENT_VER} + resource ${RES_VER} (${DATETIME})"
            ;;
          "client")
            MSG="feat: update client version ${OLD_CLIENT_VER} -> ${CLIENT_VER} (${DATETIME})"
            ;;
          "res")
            MSG="feat: update resource version ${OLD_RES_VER} -> ${RES_VER} (${DATETIME})"
            ;;
          *)
            MSG="feat: version update (${DATETIME})"
            ;;
        esac
        
        echo "commit_message=${MSG}" >> $GITHUB_OUTPUT
        echo "生成的提交信息: ${MSG}"

    - name: Commit and push changes
      if: steps.version-check.outputs.new_version == 'true'
      uses: EndBug/add-and-commit@v9
      with:
        default_author: github_actions
        message: '${{ steps.commit-msg.outputs.commit_message }}'
        add: |
          - data/res_version.txt
          - others/linkura-googleplay-apk.csv
          - data/client-res.json
    
    - name: Create summary
      run: |
        # 获取当前版本信息
        CURRENT_CLIENT_VER=""
        CURRENT_RES_VER=""
        if [ -f "others/linkura-googleplay-apk.csv" ]; then
          CURRENT_CLIENT_VER=$(head -2 others/linkura-googleplay-apk.csv | tail -1 | cut -d',' -f2)
        fi
        if [ -f "data/res_version.txt" ]; then
          CURRENT_RES_VER=$(head -n 1 data/res_version.txt)
        fi
        
        # 始终显示当前版本信息
        echo "📊 **当前版本信息**" >> $GITHUB_STEP_SUMMARY
        echo "🔄 客户端版本: ${CURRENT_CLIENT_VER:-未知}" >> $GITHUB_STEP_SUMMARY
        echo "📦 资源版本: ${CURRENT_RES_VER:-未知}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.version-check.outputs.new_version }}" == "true" ]; then
          UPDATE_TYPE="${{ steps.version-check.outputs.update_type }}"
          CLIENT_VER="${{ steps.version-check.outputs.client_version }}"
          RES_VER="${{ steps.version-check.outputs.res_version }}"
          OLD_CLIENT_VER="${{ steps.version-check.outputs.old_client_version }}"
          OLD_RES_VER="${{ steps.version-check.outputs.old_res_version }}"
          
          echo "🎉 **检测到版本更新**" >> $GITHUB_STEP_SUMMARY
          case "$UPDATE_TYPE" in
            "client+res")
              echo "🔄 客户端: ${OLD_CLIENT_VER} → ${CLIENT_VER}" >> $GITHUB_STEP_SUMMARY
              echo "📦 资源: ${OLD_RES_VER} → ${RES_VER}" >> $GITHUB_STEP_SUMMARY
              ;;
            "client")
              echo "🔄 客户端: ${OLD_CLIENT_VER} → ${CLIENT_VER}" >> $GITHUB_STEP_SUMMARY
              ;;
            "res")
              echo "📦 资源: ${OLD_RES_VER} → ${RES_VER}" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "✅ 检测到版本更新" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          echo "📝 已提交更新到仓库" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **没有检测到版本更新**" >> $GITHUB_STEP_SUMMARY
        fi

  auto-upload:
    runs-on: ubuntu-latest
    needs: check-res-version
    if: ${{ success() && needs.check-res-version.outputs.new_version == 'true' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: 'main'
        fetch-depth: 2  # 需要获取前两个提交来比较差异
    
    - name: Setup Python and dependencies
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: pip install requests
    
    - name: Upload client-res.json to R2
      env:
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      run: |
        # 使用linkura-motion-cli工具上传client-res.json
        TOOL_URL="https://github.com/ChocoLZS/linkura-cli/releases/download/linkura-motion-cli-v1.1.0/linkura-motion-cli-x86_64-unknown-linux-musl.tar.gz"
        TOOL_NAME="linkura-motion-cli"
        
        # 创建临时目录
        TEMP_DIR=$(mktemp -d)
        
        echo "下载 linkura-motion-cli..."
        curl -L "$TOOL_URL" -o "$TEMP_DIR/linkura-motion-cli.tar.gz"
        
        echo "解压 linkura-motion-cli..."
        tar -xzf "$TEMP_DIR/linkura-motion-cli.tar.gz" -C "$TEMP_DIR"
        chmod +x "$TEMP_DIR/$TOOL_NAME"
        
        echo "上传 client-res.json 到 R2..."
        if [ -f "data/client-res.json" ]; then
          # 使用linkura-motion-cli上传文件
          # 参数说明: -p 指定项目类型，-f 指定文件路径，-c 指定并发数
          "$TEMP_DIR/$TOOL_NAME" upload -p client-res -f "data/client-res.json" -c 1
          echo "✅ client-res.json 已成功上传到 R2"
        else
          echo "❌ 错误: data/client-res.json 文件不存在"
          exit 1
        fi
        
        # 清理临时文件
        rm -rf "$TEMP_DIR"
        
        echo "上传任务完成"

  # notification:
  #   runs-on: ubuntu-latest
  #   needs: check-res-version
  #   # if: always()  # 无论是否有新版本都发送通知
  #   if: false
    
  #   steps:
  #   # - name: Bypass Cloudflare for GitHub Action
  #   #   uses: xiaotianxt/bypass-cloudflare-for-github-action@v1.1.1
  #   #   with:
  #   #     cf_zone_id: ${{ secrets.CF_ZONE_ID }}
  #   #     cf_api_token: ${{ secrets.CF_API_TOKEN }}
  #   - name: Send Uptime notification
  #     run: |
  #       # 构建消息内容
  #       if [ "${{ needs.check-res-version.outputs.new_version }}" == "true" ]; then
  #         UPDATE_TYPE="${{ needs.check-res-version.outputs.update_type }}"
  #         CLIENT_VER="${{ needs.check-res-version.outputs.client_version }}"
  #         RES_VER="${{ needs.check-res-version.outputs.res_version }}"
          
  #         case "$UPDATE_TYPE" in
  #           "client+res")
  #             MSG="检测到版本更新: 客户端v${CLIENT_VER} + 资源${RES_VER}"
  #             ;;
  #           "client")
  #             MSG="检测到客户端版本更新: ${CLIENT_VER}"
  #             ;;
  #           "res")
  #             MSG="检测到资源版本更新: ${RES_VER}"
  #             ;;
  #           *)
  #             MSG="检测到版本更新"
  #             ;;
  #         esac
  #         STATUS="up"
  #       else
  #         MSG="版本检查完成，无新版本"
  #         STATUS="up"
  #       fi
        
  #       # URL编码消息
  #       ENCODED_MSG=$(echo "$MSG" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip()))")
        
  #       # 构建完整的URL
  #       UPTIME_URL="${{ secrets.UPTIME_URL_RES_CHECK }}?status=up&ping=&msg=${ENCODED_MSG}"
        
  #       echo "发送通知: $MSG"
  #       echo "编码后的消息: $ENCODED_MSG"
        
  #       # 发送请求
  #       curl -f "$UPTIME_URL" || echo "Uptime通知发送失败"
